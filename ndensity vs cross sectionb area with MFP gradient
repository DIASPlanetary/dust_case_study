# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 13:58:24 2025

@author: march
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from scipy.interpolate import RBFInterpolator
from scipy.spatial import ConvexHull

# Load the datasets from the respective CSV files
datasetEuK = np.loadtxt('Europa_kruger_extremes.csv', delimiter=',').T
datasetIK = np.loadtxt('Io_kruger_extremes.csv', delimiter=',').T
datasetCK = np.loadtxt('Callisto_kruger_extremes.csv', delimiter=',').T
datasetIM = np.loadtxt('Io_mcdoniel_extremes.csv', delimiter=',').T
datasetEuS = np.loadtxt('Europa_south_extremes.csv', delimiter=',').T
datasetEnM = np.loadtxt('Enceladus_meier_extremes.csv', delimiter=',').T
datasetIA = np.loadtxt('Io_adeloye_extremes.csv', delimiter=',').T

# Assign the first column as Radius of the particle
REuK = datasetEuK[0]
# Assign the second column as number density of particles
ndensityEuK = datasetEuK[1]
CSAEuK = []
MFPEuK = []

RIK = datasetIK[0]
ndensityIK = datasetIK[1]
CSAIK = []
MFPIK = []

RCK = datasetCK[0]
ndensityCK = datasetCK[1]
CSACK = []
MFPCK = []

RIM = datasetIM[0]
ndensityIM = datasetIM[1]
CSAIM = []
MFPIM = []

REuS = datasetEuS[0]
ndensityEuS = datasetEuS[1]
CSAEuS = []
MFPEuS = []

REnM = datasetEnM[0]
ndensityEnM = datasetEnM[1]
CSAEnM = []
MFPEnM = []

RIA = datasetIA[0]
ndensityIA = datasetIA[1]
CSAIA = []
MFPIA = []

for i in range(0, len(ndensityEuK)):
    # For all the values of ndensity
    for j in range(0, len(REuK)):
        # For all the values of radius
        csa = 4*3.14*(REuK[j]**2)  # Calculate Cross Section Area
        CSAEuK.append(csa)  # Add CSA value to CSA list
        mfp = 1/(ndensityEuK[i]*csa)  # Calculate Mean Free Path value
        MFPEuK.append(mfp)  # Add MFP value to MFP list

# Transform the above lists  in arrays
REuK = np.array(REuK)
CSAEuK = np.array(CSAEuK)
MFPEuK = np.array(MFPEuK)
ndensityEuK = np.array(ndensityEuK)

# test of changes from desktop
# test par

# Process repeated for all datasets loaded
for i in range(0, len(ndensityIK)):
    for j in range(0, len(RIK)):
        csa = 4*3.14*(RIK[j]**2)
        CSAIK.append(csa)
        mfp = 1/(ndensityIK[i]*csa)
        MFPIK.append(mfp)

RIK = np.array(RIK)
CSAIK = np.array(CSAIK)
MFPIK = np.array(MFPIK)
ndensityIK = np.array(ndensityIK)

for i in range(0, len(ndensityCK)):
    for j in range(0, len(RCK)):
        csa = 4*3.14*(RCK[j]**2)
        CSACK.append(csa)
        mfp = 1/(ndensityCK[i]*csa)
        MFPCK.append(mfp)

RCK = np.array(RCK)
CSACK = np.array(CSACK)
MFPCK = np.array(MFPCK)
ndensitCK = np.array(ndensityCK)

for i in range(0, len(ndensityIM)):
    for j in range(0, len(RIM)):
        csa = 4*3.14*(RIM[j]**2)
        CSAIM.append(csa)
        mfp = 1/(ndensityIM[i]*csa)
        MFPIM.append(mfp)

RIM = np.array(RIM)
CSAIM = np.array(CSAIM)
MFPIM = np.array(MFPIM)
ndensityIM = np.array(ndensityIM)

for i in range(0, len(ndensityEuS)):
    for j in range(0, len(REuS)):
        csa = 4*3.14*(REuS[j]**2)
        CSAEuS.append(csa)
        mfp = 1/(ndensityEuS[i]*csa)
        MFPEuS.append(mfp)

REuS = np.array(REuS)
CSAEuS = np.array(CSAEuS)
MFPEuS = np.array(MFPEuS)
ndensityEuS = np.array(ndensityEuS)

for i in range(0, len(ndensityEnM)):
    for j in range(0, len(REnM)):
        csa = 4*3.14*(REnM[j]**2)
        CSAEnM.append(csa)
        mfp = 1/(ndensityEnM[i]*csa)
        MFPEnM.append(mfp)

REnM = np.array(REnM)
CSAEnM = np.array(CSAEnM)
MFPEnM = np.array(MFPEnM)
ndensityEnM = np.array(ndensityEnM)

for i in range(0, len(ndensityIA)):
    for j in range(0, len(RIA)):
        csa = 4*3.14*(RIA[j]**2)
        CSAIA.append(csa)
        mfp = 1/(ndensityIA[i]*csa)
        MFPIA.append(mfp)

RIA = np.array(RIA)
CSAIA = np.array(CSAIA)
MFPIA = np.array(MFPIA)
ndensityIA = np.array(ndensityIA)

# Assign X and Y values for plotting
X_EuK = CSAEuK
X_IK = CSAIK
X_CK = CSACK
X_IM = CSAIM
X_EuS = CSAEuS
X_EnM = CSAEnM
X_IA = CSAIA
Y_EuK = []
Y_IK = []
Y_CK = []
Y_IM = []
Y_EuS = []
Y_EnM = []
Y_IA = []

# For each dataset, repeat the number density value,
# to match the number of x values in each set
for m in range(0, 2):
    Y_EuK.append(ndensityEuK[0])
for m in range(2, 4):
    Y_EuK.append(ndensityEuK[1])

for m in range(0, 2):
    Y_IK.append(ndensityIK[0])
for m in range(2, 4):
    Y_IK.append(ndensityIK[1])

for m in range(0, 2):
    Y_CK.append(ndensityCK[0])
for m in range(2, 4):
    Y_CK.append(ndensityCK[1])

for m in range(0, 2):
    Y_IM.append(ndensityIM[0])
for m in range(2, 4):
    Y_IM.append(ndensityIM[1])

for m in range(0, 2):
    Y_EuS.append(ndensityEuS[0])
for m in range(2, 4):
    Y_EuS.append(ndensityEuS[1])

for m in range(0, 2):
    Y_EnM.append(ndensityEnM[0])
for m in range(2, 4):
    Y_EnM.append(ndensityEnM[1])

for m in range(0, 2):
    Y_IA.append(ndensityIA[0])
for m in range(2, 4):
    Y_IA.append(ndensityIA[1])

# Plot the individual sets on a scatter plot
fig, ax = plt.subplots()
ax.scatter(X_EuK, Y_EuK, label='Europa Kruger et al., 2003',
           marker='.', color='b')
ax.scatter(X_IK, Y_IK, label='Io Kruger et al., 2003',
           marker='.', color='y')
ax.scatter(X_CK, Y_CK, label='Callisto Kruger et al., 2003',
           marker='.', color='r')
ax.scatter(X_IM, Y_IM, label='Io McDoniel et al., 2015',
           marker='s', color='y')
ax.scatter(X_EuS, Y_EuS, label='Europa Southworth et al., 2015',
           marker='^', color='b')
ax.scatter(X_EnM, Y_EnM, label='Enceladus Meier et al., 2015',
           marker='D', color='g')
ax.scatter(X_IA, Y_IA, label='Io Adeloye et al., 2025',
           marker='x', color='y')

# To visualize all points easly, both axis are set with log scale
ax.set_yscale('log')
ax.set_xscale('log')

# Plot title
plt.title("Number Density vs Cross-Section Area for Dust")

# Plot labels
plt.xlabel("Cross-Section Area (m²)", fontsize=14)
plt.ylabel("Number Density (m⁻³)", fontsize=14)

# Create lists to contain all the combined data
all_CSA = []
all_ndensity = []
all_MFP = []

# Process each dataset, ensuring alignment of CSA, ndensity, and MFP
for CSA, ndensity, MFP in [
    (CSAEuK, ndensityEuK, MFPEuK),
    (CSAIK, ndensityIK, MFPIK),
    (CSACK, ndensityCK, MFPCK),
    (CSAIM, ndensityIM, MFPIM),
    (CSAEuS, ndensityEuS, MFPEuS),
    (CSAEnM, ndensityEnM, MFPEnM),
    (CSAIA, ndensityIA, MFPIA),
]:
    # Repeat ndensity to match CSA and MFP sizes
    repeated_ndensity = np.repeat(ndensity, len(CSA) // len(ndensity))

    # Append to the combined lists
    all_CSA.extend(CSA)
    all_ndensity.extend(repeated_ndensity)
    all_MFP.extend(MFP)

# Convert lists to numpy arrays
all_CSA = np.array(all_CSA)
all_ndensity = np.array(all_ndensity)
all_MFP = np.array(all_MFP)

# Define a grid for the background
x = np.log10(all_CSA)  # Log scale for cross-sectional area
y = np.log10(all_ndensity)  # Log scale for number density
z = np.log10(all_MFP)  # Log scale for mean free path

# Mask out invalid values (zero or infinity)
mask = ~(np.isinf(x) |
         np.isnan(x) |
         np.isinf(y) |
         np.isnan(y) |
         np.isinf(z) |
         np.isnan(z))

x = x[mask]
y = y[mask]
z = z[mask]

# Define radii in meters
parsec_length = 3.086e16  # parsec
light_year = 9.46e15  # light year
solar_system_radius = 1.78e10  # Solar System radius (m)
jupiter_radius = 69911e3  # Jupiter radius (m)
jupiter_magnetosphere = 75 * jupiter_radius
# Jupiter magnetosphere radius (m)
moon_radius_average = 1930e3
enceladus_radius = 3250e3  # Enceladus plume (m)
tvashtar_plume = 300e3  # Tvashtar altitude (m)


# List of (radius value, label, color) for diagonal lines
radius_values = [
    (parsec_length, '1 parsec (3.086e13 km)', 'red'),
    (light_year, '1 Light Year (9.46e12 km)', 'purple'),
    (solar_system_radius, 'Solar System Radius (1.78e7 km)', 'orange'),
    (jupiter_magnetosphere, 'Jupiter Magnetosphere (5.24e6 km)',
     'purple'),
    (jupiter_radius, 'Jupiter Radius (6.99e4 km)', 'cyan'),
    (enceladus_radius, 'Enceladus Plume (3.25e3 km)', 'pink'),
    (moon_radius_average, 'Jupiter Moons Average R (1.93e3 km)', 'lime'),
    (tvashtar_plume, 'Tvashtar Plume (3.00e2 km)', 'yellow')
]

# Define a grid for plotting with expanded edges
x_margin = 0.1  # Margin as a fraction of the range
y_margin = 0.1
x_range = x.max() - x.min()
y_range = y.max() - y.min()

x_grid = np.linspace(x.min() - x_margin * x_range,
                     x.max() + x_margin * x_range, 200)
y_grid = np.linspace(y.min() - y_margin * y_range,
                     y.max() + y_margin * y_range, 200)
X_grid, Y_grid = np.meshgrid(x_grid, y_grid)

# Interpolate the data using RBFInterpolator
points = np.vstack((x, y)).T
rbf = RBFInterpolator(points, z, kernel='linear', epsilon=1)
Z_grid = rbf(np.vstack((X_grid.ravel(),
                        Y_grid.ravel())).T).reshape(X_grid.shape)

# Plot the heatmap with pcolormesh
fig, ax = plt.subplots(figsize=(12, 10))
heatmap = ax.pcolormesh(
    10**x_grid, 10**y_grid,
    10**Z_grid,  # Convert back from log scale for axes and color
    cmap='plasma',
    norm=LogNorm(vmin=10**z.min(),
                 vmax=10**z.max()),  # Logarithmic color scaling
    shading='auto'  # Avoid grid artifacts
)

# Add a colorbar
cbar = fig.colorbar(heatmap, ax=ax, pad=0.02)
cbar.set_label("Mean Free Path (m)", fontsize=14)

# Add scatterplot points with larger markers
marker_size = 150  # Adjust marker size for better visibility
ax.scatter(X_EuK, Y_EuK, label='Europa Kruger et al., 2003',
           marker='.', s=marker_size, color='white', edgecolor='blue')
ax.scatter(X_IK, Y_IK, label='Io Kruger et al., 2003',
           marker='.', s=marker_size, color='white', edgecolor='yellow')
ax.scatter(X_CK, Y_CK, label='Callisto Kruger et al., 2003',
           marker='.', s=marker_size, color='white', edgecolor='red')
ax.scatter(X_IM, Y_IM, label='Io McDoniel et al., 2015',
           marker='s', s=marker_size, color='white', edgecolor='yellow')
ax.scatter(X_EuS, Y_EuS, label='Europa Southworth et al., 2015',
           marker='^', s=marker_size, color='white', edgecolor='blue')
ax.scatter(X_EnM, Y_EnM, label='Enceladus Meier et al., 2015',
           marker='D', s=marker_size, color='white', edgecolor='green')
ax.scatter(X_IA, Y_IA, label='Io Adeloye et al., 2025',
           marker='X', s=marker_size, color='white', edgecolor='yellow')


# Function to add a shadow around a dataset
def add_shadow_region(x_data, y_data, color, alpha=0.4):
    # Draws a shadow around a dataset using Convex Hull if possible.
    x_data, y_data = np.array(x_data), np.array(y_data)

    # Convert to log scale, handling zeros
    x_data = np.where(x_data > 0, np.log10(x_data), np.nan)
    y_data = np.where(y_data > 0, np.log10(y_data), np.nan)

    # Ensure unique points for ConvexHull
    unique_points = np.column_stack((x_data, y_data))
    unique_points = np.unique(unique_points, axis=0)

    # ConvexHull requires at least 3 unique points
    if unique_points.shape[0] >= 3:
        try:
            hull = ConvexHull(unique_points)
            hull_x = 10**unique_points[hull.vertices, 0]
            # Convert back from log scale
            hull_y = 10**unique_points[hull.vertices, 1]
            ax.fill(hull_x, hull_y, color=color, alpha=alpha, linewidth=0)
        except Exception as e:
            print(f"ConvexHull error: {e}")  # Debugging
    else:
        print("o")


# Apply shadowed regions to each dataset
add_shadow_region(X_EuK, Y_EuK, 'black')
add_shadow_region(X_IK, Y_IK, 'black')
add_shadow_region(X_CK, Y_CK, 'black')
add_shadow_region(X_IM, Y_IM, 'black')
add_shadow_region(X_EuS, Y_EuS, 'black')
add_shadow_region(X_EnM, Y_EnM, 'black')
add_shadow_region(X_IA, Y_IA, 'black')


# Function to add labeled shadowed boxes
def add_label_box(x_data, y_data, label, color):
    """Places a label box near the dataset."""
    x_pos = np.median(x_data)  # Use median to find a representative position
    y_pos = np.median(y_data)

    ax.text(x_pos, y_pos, label, fontsize=10, color=color,
            ha='center', va='center',
            bbox=dict(facecolor='white',
                      edgecolor=color, boxstyle='round,pad=0.3', alpha=1))


# Add boxes for each dataset
add_label_box(X_EuK, Y_EuK, 'Europa Kruger', 'black')
add_label_box(X_IK, Y_IK, 'Io Kruger', 'black')
add_label_box(X_CK, Y_CK, 'Callisto Kruger', 'black')
add_label_box(X_IM, Y_IM, 'Io McDoniel', 'black')
add_label_box(X_EuS, Y_EuS, 'Europa Southworth', 'black')
add_label_box(X_EnM, Y_EnM, 'Enceladus Meier', 'black')
add_label_box(X_IA, Y_IA, 'Io Adeloye', 'black')

# Add diagonal lines for each radius value
for radius_value, label, line_color in radius_values:
    y_diagonal = 1 / (radius_value * 10**x_grid)
    ax.plot(10**x_grid, y_diagonal, '--', color=line_color, lw=2, label=label)

# Set plot labels, scales, and title
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel("Cross-Section Area (m²)", fontsize=14)
ax.set_ylabel("Number Density (m⁻³)", fontsize=14)
ax.set_title("Mean Free Path Variation Across Moons colormap", fontsize=18)

# Add legend
ax.legend(loc='lower left', fontsize=7.9, edgecolor='black')

plt.tight_layout()
plt.show()

# Save the values from all_CSA and all_MFP into a text file
with open("CSA_MFP_data.txt", "w") as file:
    file.write("# Cross-Section Area and Mean Free Path Data\n")
    file.write("# Format: Origin | CSA (m²) | MFP (m)\n\n")

    datasets = [
        ("Europa Kruger", CSAEuK, MFPEuK),
        ("Io Kruger", CSAIK, MFPIK),
        ("Callisto Kruger", CSACK, MFPCK),
        ("Io McDoniel", CSAIM, MFPIM),
        ("Europa Southworth", CSAEuS, MFPEuS),
        ("Enceladus Meier", CSAEnM, MFPEnM),
        ("Io Adeloye", CSAIA, MFPIA)
    ]

    for name, CSA_values, MFP_values in datasets:
        file.write(f"# {name} Data\n")
        for csa, mfp in zip(CSA_values, MFP_values):
            file.write(f"{name} | {csa:.6e} | {mfp:.6e}\n")
        file.write("\n")

print("Data successfully saved to CSA_MFP_data.txt")

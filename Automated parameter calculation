# -*- coding: utf-8 -*-
"""
Created on Thu Jan 16 11:04:47 2025

@author: march
"""

import numpy as np

# Load dataset
dataset = np.loadtxt('prova automazione.csv', delimiter=',').T

mass = dataset[0]
density = dataset[1]
ndensity = dataset[2]

# Initialize empty lists for results
R = []
CSA = []
MFP = []

# Loop over each mass value
for m in mass:
    # Calculate R and CSA for the current mass and all densities
    r = ((3 * m) / (4 * np.pi * density)) ** (1 / 3)
    csa = 4 * np.pi * (r ** 2)

    # Filter out invalid R and CSA values (e.g., where density is zero or produces inf/NaN)
    valid_mask = np.isfinite(r) & np.isfinite(csa) & (r > 0) & (csa > 0)
    r = r[valid_mask]
    csa = csa[valid_mask]

    # Append R and CSA results
    R.append(r)
    CSA.append(csa)

    # Calculate MFP for all valid CSA values and all ndensity values
    if len(csa) > 0:  # Check if there are valid CSA values to avoid empty arrays
        mfp = 1 / (ndensity[:, None] * csa)  # Broadcasting ndensity over csa
        # Filter out invalid MFP values
        mfp = mfp[np.isfinite(mfp) & (mfp > 0)]
        MFP.append(mfp)

# Convert results to NumPy arrays
R = np.array([val for sublist in R for val in sublist])  # Flatten nested lists
CSA = np.array([val for sublist in CSA for val in sublist])  # Flatten nested lists
MFP = np.array([val for sublist in MFP for val in sublist])  # Flatten nested lists

# Print results
print("R (Radius):", R)
print("CSA (Cross-sectional Area):", CSA)
print("MFP (Mean Free Path):", MFP)
